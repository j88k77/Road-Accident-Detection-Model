import os
import cv2     # for capturing videos
import math
import geocoder
import requests
import pandas as pd
from twilio.rest import Client
from geopy.geocoders import Nominatim
from keras.preprocessing import image  # for preprocessing images
import numpy as np                                   # for mathematical operations
from keras.utils import to_categorical # equivalent to np_utils
import matplotlib.pyplot as plt                     # for plotting
from skimage.transform import resize
import streamlit as st

st.title('Road Accident Detection System')
# ACC_SID = st.text_input("Enter your Account SID:")
# Auth_token = st.text_input("Enter your Auth Token:")
# Twilio_no = st.text_input("Enter your Twilio number:")
# Phone_no = st.text_input("Enter your Phone number")
#
# # Wait for all inputs to be filled
# while ACC_SID == "" or Auth_token == "" or Twilio_no == "" or Phone_no == "":
#     st.warning("Please fill in all the required fields.")
#     st.stop()
ACC_SID = st.text_input("Enter your Account SID:")
Auth_token = st.text_input("Enter your Auth Token:")
Twilio_no = st.text_input("Enter your Twilio number:")
Phone_no = st.text_input("Enter your Phone number")

while ACC_SID == "" or Auth_token == "" or Twilio_no == "" or Phone_no == "":
    st.warning("Please fill in all the required fields.")
    st.stop()

count = 0
videoFile = 'Accidents.mp4'
cap = cv2.VideoCapture(videoFile)   # capturing the video from the given path
frameRate = cap.get(5) #frame rate
x=1
while cap.isOpened():
    frameId = cap.get(1) #current frame number
    ret, frame = cap.read()
    if not ret:
        break
    if frameId % math.floor(frameRate) == 0:
        filename ="%d.jpg" % count;count+=1
        cv2.imwrite(filename, frame)
cap.release()
print ("Done!")


data = pd.read_csv('mapping.csv')     # reading the csv file
data.head()

X = [ ]     # creating an empty array
for img_name in data.Image_ID:
    img = plt.imread('' + img_name)
    X.append(img)  # storing each image in array X
X = np.array(X)    # converting list to array

y = data.Class
dummy_y = to_categorical(y)
image = []
for i in range(0,X.shape[0]):
    a = resize(X[i], preserve_range=True, output_shape=(224,224)).astype(int)      # reshaping to 224*224*3
    image.append(a)
X = np.array(image)
from keras.applications.vgg16 import preprocess_input
X = preprocess_input(X,data_format=None)
from sklearn.model_selection import train_test_split
X_train, X_valid, y_train, y_valid = train_test_split(X, dummy_y, test_size=0.3, random_state=42)
from keras.models import Sequential
from keras.applications.vgg16 import VGG16
from keras.layers import Dense, InputLayer, Dropout

base_model = VGG16(weights='imagenet', include_top=False, input_shape=(224, 224, 3))
X_train = base_model.predict(X_train)
X_valid = base_model.predict(X_valid)

X_train = X_train.reshape(155, 7*7*512)      # converting to 1-D
X_valid = X_valid.reshape(67, 7*7*512)
train = X_train/X_train.max()      # centering the data
X_valid = X_valid/X_train.max()
model = Sequential()
model.add(InputLayer((7*7*512,)))    # input layer
model.add(Dense(units=1024, activation='sigmoid')) # hidden layer
model.add(Dense(2, activation='softmax'))    # output layer
model.summary()

model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
model.fit(train, y_train, epochs=100, validation_data=(X_valid, y_valid))

model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
count = 0

videoFile = st.text_input("Enter the path to your video file:")

# Check if the user has entered a valid path (loop until valid path)
while videoFile == "":
    st.warning("Please enter the path to your video file.")
    st.stop()

frameRate = cap.get(5) #frame rate
x=1
while cap.isOpened():
    frameId = cap.get(1) #current frame number
    ret, frame = cap.read()
    if not ret:
        break
    if frameId % math.floor(frameRate) == 0:
        filename ="test%d.jpg" % count;count+=1
        cv2.imwrite(filename, frame)
cap.release()
print ("Done!")

test = pd.read_csv('test.csv')
test_image = []
for img_name in test.Image_ID:
    img = plt.imread('' + img_name)
    test_image.append(img)
test_img = np.array(test_image)
test_image = []
for i in range(0,test_img.shape[0]):
    a = resize(test_img[i], preserve_range=True, output_shape=(224,224)).astype(int)
    test_image.append(a)
test_image = np.array(test_image)
# preprocessing the images
test_image = preprocess_input(test_image, data_format=None)

test_image = base_model.predict(test_image)

test_image = test_image.reshape(9, 7*7*512)

test_image = test_image/test_image.max()
predictions = model.predict(test_image)
print(predictions)
flag = 0
for i in range (0,9):
    if predictions[i][0]<predictions[i][1]:
        print("No Accident")
    else:
        flag = 1
        print('Accident')
if flag == 1:
    st.title('Accident Detected')
else:
    st.title('No Accident')
geoLoc = Nominatim(user_agent="GetLoc")
g = geocoder.ip('me')
locname = geoLoc.reverse(g.latlng)

client = Client(ACC_SID, Auth_token)
cap = cv2.VideoCapture(videoFile)
i=0
flag=0
while True:
    ret,frame=cap.read()
    if ret:
        if predictions[int(i/15)%9][0]<predictions[int(i/15)%9][1]:
            predict="No Accident"
        else:
            predict="Accident"
            flag=1
        font = cv2.FONT_HERSHEY_SIMPLEX
        cv2.putText(frame,
                predict,
                (50, 50),
                font, 1,
                (0, 255, 255),
                3,
                cv2.LINE_4)
        cv2.imshow('Frame', frame)
        i=i+1
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break
    else:
        break
if flag==1:
    client.messages.create(
                 body="Accident detected in "+locname.address,from_= Twilio_no,to = Phone_no
                 )

cap.release()

cv2.destroyAllWindows()
